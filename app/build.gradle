apply plugin: 'com.android.application'

/**
 * this file is modified by Shigeoka Kodai
 * original file is here https://github.com/googlesamples/android-vulkan-tutorials
 */

/**
 * Download validation layer binary release zip file from Khronos github repo
 *    https://github.com/KhronosGroup/Vulkan-ValidationLayers/releases
 * Note that: binary release could be manually downloaded and put it into
 *            jniLibs directory. This is just to do it automatically in case
 *            someday want to use github action continuous CI.
 * The release file name we are interested is in the format of
 *    android-binaries-${VERSION}.zip
 * When you need to use the latest release, do these:
 * 1. remove the pre-downloaded dir(if exists): rm -fr $projectRoot.layerLibs
 * 2. update the version number for ${LAYER_VERSION} in the following line:
 */
def LAYER_VERSION = "1.2.198.0"

// Variables shared between download layer binary and project build script.
def LAYER_SITE ="https://github.com/KhronosGroup/Vulkan-ValidationLayers"
def LAYER_LIB_ROOT= rootDir.absolutePath.toString() + "/layerLib"
def LAYER_JNILIB_DIR="${LAYER_LIB_ROOT}/jniLibs"

// Download the release zip file to ${LAYER_LIB_ROOT}/
task download {
    mkdir "${LAYER_LIB_ROOT}"
    def f = new File("${LAYER_LIB_ROOT}/android-binaries-${LAYER_VERSION}.zip")
    new URL("${LAYER_SITE}/releases/download/sdk-${LAYER_VERSION}/android-binaries-${LAYER_VERSION}.zip")
            .withInputStream { i -> f.withOutputStream { it << i } }
}

// Unzip the downloaded release file to ${LAYER_JNILIB_DIR}, it is place for APK packing.
task unzip(dependsOn: download, type: Copy) {
    from zipTree(file("${LAYER_LIB_ROOT}/android-binaries-${LAYER_VERSION}.zip"))
    into file("${LAYER_JNILIB_DIR}")
}

android {
    compileSdkVersion 32
    ndkVersion '23.1.7779620'
    defaultConfig {
        applicationId  "com.Aqoole.project.zero"
        minSdkVersion    26
        targetSdkVersion 32
        versionCode 1
        versionName "0.0.1"

        // Shader compilation directives, put glsl shaders to app/src/main/shaders
        // android studio will pick them up and compile them into APK/assets/shaders
        // KNOWN ISSUE:  if shaders having errors, it takes long time for gradle to timeout
        //               but it will eventually time out and complain about shader compiling
        shaders {
            glslcArgs.addAll(['-c', '-g'])
        }
        externalNativeBuild {
            cmake {
                // armeabi is not supported, not building for mips in samples
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
                arguments '-DANDROID_TOOLCHAIN=clang', '-DANDROID_STL=c++_static'
                version '3.18.1'
            }
        }
    }
   externalNativeBuild.cmake.path 'CMakeLists.txt'
   buildTypes.release.minifyEnabled = false
   sourceSets {
       main {
           jniLibs {
               // Pre-requirement: layer release downloaded and unzip to this location
               srcDirs = ["${LAYER_JNILIB_DIR}"]
           }
       }
   }
}

dependencies {
    implementation project(path: ':AqooleEngine')
    def jniFile = "${LAYER_JNILIB_DIR}/arm64-v8a/libVkLayer_khronos_validation.so"
    if(!file("${jniFile}").exists()) {
        implementation files("${jniFile}") {
            builtBy 'unzip'
        }
    }
}

