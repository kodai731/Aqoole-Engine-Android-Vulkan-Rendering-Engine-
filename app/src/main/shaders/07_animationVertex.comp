#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#include "07_raycommon.glsl"


layout(binding = 0, set = 0, scalar) buffer Verticesobj {vec3 vobj[];} verticesobj[];
layout(binding = 1, set = 0, scalar) buffer VerticesobjDst {vec3 vobjDst[];} verticesobjDst[];
layout(binding = 2) uniform Mat
{
  mat4 m;
}mat;

void main()
{
  vec3 v0 = verticesobj[0].vobj[gl_GlobalInvocationID.x];
    /*
  const float PI       = 3.14159265;
  const float signY    = (v0.pos.y >= 0 ? 1 : -1);
  const float radius   = length(v0.pos.xz);
  const float argument = pushc.iTime * 4 + radius * PI;
  const float s        = sin(argument);
  v0.pos.y             = signY * abs(s) * 0.5;

  if(radius == 0.0f)
  {
    v0.nrm = vec3(0.0f, signY, 0.0f);
  }
  else
  {
    const float c        = cos(argument);
    const float xzFactor = -PI * s * c;
    const float yFactor  = 2.0f * signY * radius * abs(s);
    v0.nrm               = normalize(vec3(v0.pos.x * xzFactor, yFactor, v0.pos.z * xzFactor));
  }
*/
  verticesobjDst[0].vobjDst[gl_GlobalInvocationID.x] = (mat.m * vec4(v0, 1.0)).xyz;
}