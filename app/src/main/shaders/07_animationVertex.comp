#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#include "07_raycommon.glsl"


layout(binding = 0, set = 0, scalar) buffer Verticesobj {Vertex3DObj vobj[];} verticesobj;
layout(binding = 1, set = 0, scalar) buffer VerticesobjDst {Vertex3DObj vobjDst[];} verticesobjDst;
layout(binding = 2, set = 0, scalar) buffer Indices {uint i[];} indices[];
layout(binding = 3, set = 0, scalar) buffer Joints {uint j[];} joints[];
layout(binding = 4, set = 0, scalar) buffer Weights {float f[];} weights[];
layout(binding = 5, set = 0, scalar) buffer Mats{mat4 m[];} mats[];
void main()
{
  //uint index = indices[0].i[gl_GlobalInvocationID.x];
  uint index = indices[0].i[gl_GlobalInvocationID.x];
  float w = weights[0].f[gl_GlobalInvocationID.x];
  vec3 v0 = verticesobj.vobj[index].pos;
    /*
  const float PI       = 3.14159265;
  const float signY    = (v0.pos.y >= 0 ? 1 : -1);
  const float radius   = length(v0.pos.xz);
  const float argument = pushc.iTime * 4 + radius * PI;
  const float s        = sin(argument);
  v0.pos.y             = signY * abs(s) * 0.5;

  if(radius == 0.0f)
  {
    v0.nrm = vec3(0.0f, signY, 0.0f);
  }
  else
  {
    const float c        = cos(argument);
    const float xzFactor = -PI * s * c;
    const float yFactor  = 2.0f * signY * radius * abs(s);
    v0.nrm               = normalize(vec3(v0.pos.x * xzFactor, yFactor, v0.pos.z * xzFactor));
  }
*/
  uint j = joints[0].j[gl_GlobalInvocationID.x];
  v0 = (w * (mats[0].m[j] * vec4(v0, 1.0))).xyz;
  verticesobjDst.vobjDst[index].pos += v0;
  //verticesobjDst.vobjDst[0].pos = vec3(-1000.0);
}