#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_nonuniform_qualifier : enable
#include "07_raycommon.glsl"

//layout(local_size_x = 740, local_size_y = 1, local_size_z = 1) in;

float KeyFrames[5] = {0.0000, 0.2083333, 0.4166666, 0.625, 0.8333333};

layout(binding = 0, set = 0, scalar) buffer Verticesobj {vec3 vobj[];} verticesobj[];
layout(binding = 1, set = 0, scalar) buffer VerticesobjDst {Vertex3DObj vobjDst[];} verticesobjDst[];
layout(binding = 2, set = 0, scalar) buffer InfluenceCount {uint i[];} influenceCount[];
layout(binding = 3, set = 0, scalar) buffer Joints {uint j[];} joints[];
layout(binding = 4, set = 0, scalar) buffer Weights {float f[];} weights[];
layout(binding = 5, set = 0, scalar) buffer Mats{mat4 m[];} mats[];
layout(binding = 6, set = 0) uniform AnimNum{uint a;} animNum;
layout(binding = 7, set = 0, scalar) buffer Debug {uint d[];} debug[];
layout(binding = 8, set = 0, scalar) buffer DebugVertex {Vertex3DObj dv[];} debugV[];
layout(binding = 9, set = 0, scalar) buffer MatsNext{mat4 m[];} matsNext[];
layout(binding = 10, set = 0) uniform Time{float t;} time;
layout(binding = 11, set = 0, scalar) buffer JointOffset{uint o[];} jointOffset[];
layout(binding = 12, set = 0, scalar) buffer Indices{uint i[];} indices[];

void main()
{
  uint ii = gl_WorkGroupID.y * 1024 + gl_WorkGroupID.x;
  //uint index = gl_LocalInvocationIndex;
  //uint index = gl_WorkGroupID.x;
  if(ii < 4260){
    uint index = indices[0].i[ii];
    uint influence = influenceCount[0].i[index];
    vec3 v3 = vec3(0.0);
    vec3 v4 = vec3(0.0);
    vec3 v0 = verticesobj[0].vobj[index];
    uint offset = jointOffset[0].o[index];
    for (int k = 0; k < influence; k++){
      float w = weights[0].f[offset + k];
      //    memoryBarrierShared();
      //    barrier();
      //verticesobjDst[0].vobjDst[index].pos += w * v0;
      //    memoryBarrierBuffer();
      uint jj = joints[0].j[offset + k];
      vec3 v1 = w * (mats[0].m[jj] * vec4(v0, 1.0)).xyz;
      vec3 v2 = w * (matsNext[0].m[jj] * vec4(v0, 1.0)).xyz;
      if (animNum.a == 4){
        v3 += v1 + ((v2 - v1) * (1.0 - time.t));
      } else {
        v3 += v1 + ((v2 - v1) * (time.t - KeyFrames[animNum.a]));
      }
      v4 += (1.0f / float(influence)) * v0;
      //v0 = w * v0;
      //debugV[0].dv[offset + k].pos = v3;
    }
    debug[0].d[ii] = index;
    verticesobjDst[0].vobjDst[ii].pos = v4;
    //verticesobjDst.vobjDst[0].pos = vec3(-1000.0);
  }
}