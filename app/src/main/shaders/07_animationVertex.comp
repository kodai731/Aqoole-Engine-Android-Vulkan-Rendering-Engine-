#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_nonuniform_qualifier : enable
#include "07_raycommon.glsl"

layout(local_size_x = 1023, local_size_y = 1, local_size_z = 1) in;

float KeyFrames[5] = {0.0000, 0.2083333, 0.4166666, 0.625, 0.8333333};

layout(binding = 0, set = 0, scalar) buffer Verticesobj {vec3 vobj[];} verticesobj[];
layout(binding = 1, set = 0, scalar) buffer VerticesobjDst {vec3 vobjDst[];} verticesobjDst[];
layout(binding = 2, set = 0, scalar) buffer Indices {uint i[];} indices[];
layout(binding = 3, set = 0, scalar) buffer Joints {uint j[];} joints[];
layout(binding = 4, set = 0, scalar) buffer Weights {float f[];} weights[];
layout(binding = 5, set = 0, scalar) buffer Mats{mat4 m[];} mats[];
layout(binding = 6, set = 0) uniform AnimNum{uint a;} animNum;
layout(binding = 7, set = 0, scalar) buffer Debug {uint d[];} debug[];
layout(binding = 8, set = 0, scalar) buffer DebugVertex {Vertex3DObj dv[];} debugV[];
layout(binding = 9, set = 0, scalar) buffer MatsNext{mat4 m[];} matsNext[];
layout(binding = 10, set = 0) uniform Time{float t;} time;
layout(binding = 11, set = 0) uniform DispatchNum{uint dn;} dispatchNum;

void main()
{
  //uint ii = gl_WorkGroupID.y * 1024 + gl_WorkGroupID.x;
  uint ii = gl_LocalInvocationIndex;
  if(gl_WorkGroupID.x == 1){
    ii += 1023;
  }
  if( ii < 1393){
    uint index = indices[0].i[ii];
    float w = weights[0].f[ii];
    vec3 v0 = verticesobj[0].vobj[index];
    /*
  const float PI       = 3.14159265;
  const float signY    = (v0.pos.y >= 0 ? 1 : -1);
  const float radius   = length(v0.pos.xz);
  const float argument = pushc.iTime * 4 + radius * PI;
  const float s        = sin(argument);
  v0.pos.y             = signY * abs(s) * 0.5;

  if(radius == 0.0f)
  {
    v0.nrm = vec3(0.0f, signY, 0.0f);
  }
  else
  {
    const float c        = cos(argument);
    const float xzFactor = -PI * s * c;
    const float yFactor  = 2.0f * signY * radius * abs(s);
    v0.nrm               = normalize(vec3(v0.pos.x * xzFactor, yFactor, v0.pos.z * xzFactor));
  }
*/
    //    memoryBarrierShared();
    //    barrier();
    //verticesobjDst[0].vobjDst[index].pos += w * v0;
    //    memoryBarrierBuffer();
    uint jj = joints[0].j[ii];
    vec3 v1 = w * (mats[0].m[jj] * vec4(v0, 1.0)).xyz;
    vec3 v2 = w * (matsNext[0].m[jj] * vec4(v0, 1.0)).xyz;
    vec3 v3;
    if (animNum.a == 4){
      v3 = v1 + ((v2 - v1) * (1.0 - time.t));
    } else {
      v3 = v1 + ((v2 - v1) * (time.t - KeyFrames[animNum.a]));
    }
    //v0 = w * v0;
    barrier();
    verticesobjDst[0].vobjDst[index] = v0;
    //verticesobjDst.vobjDst[0].pos = vec3(-1000.0);
    debug[0].d[ii] = ii;
    debugV[0].dv[ii].pos = v3;
  }
}