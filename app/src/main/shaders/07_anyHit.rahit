 //Copyright 2022 Shigeoka Kodai
 //
 //Licensed under the Apache License, Version 2.0 (the "License");
 //you may not use this file except in compliance with the License.
 //You may obtain a copy of the License at
 //
 //        http://www.apache.org/licenses/LICENSE-2.0
 //
 //Unless required by applicable law or agreed to in writing, software
 //distributed under the License is distributed on an "AS IS" BASIS,
 //WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //See the License for the specific language governing permissions and
 //        limitations under the License.

#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#include "07_raycommon.glsl"

layout(location = 0) rayPayloadInEXT vec4 pld;
hitAttributeEXT vec2 attribs;
layout(location = 1) rayPayloadEXT bool isShadowed;
layout(location = 2) rayPayloadEXT PayroadBlend prdBlend;

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 2, set = 0) uniform CameraProperties 
{
	mat4 viewInverse;
	mat4 projInverse;
    mat4 modelViewProj;
    mat4 normalMatrix;
} cam;
layout(binding = 3, set = 0, scalar) buffer Vertices {Vertex3D v[];} vertices[];
layout(binding = 4, set = 0) buffer Indices {uint i[];} indices[];
layout(binding = 5, set = 0, scalar) buffer Verticesobj {Vertex3DObj vobj[];} verticesobj[];
layout(binding = 6, set = 0) buffer Indicesobj {uint iobj[];} indicesobj[];
layout(binding = 7, set = 0) buffer GeometryIndices {uint gi[];} geometryIndices[];
layout(binding = 8, set = 0) uniform TextureCount {uint tc;} textureCount;
layout(binding = 9, set = 0) uniform Material {GltfMaterial gm;} Gm;
layout(binding = 10, set = 0) uniform CPOS {vec3 cp;} Cp;

layout(binding = 0, set = 1) uniform sampler2D texSampler[];

layout(push_constant) uniform Constants
{
  vec4 clearColor;
  int lightType;
}pushC;

void main()
{
  if(gl_InstanceCustomIndexEXT == 2){
    const vec3 barycentricCoords = vec3(1.0f - attribs.x - attribs.y, attribs.x, attribs.y);
    ivec3 ind = ivec3(indicesobj[0].iobj[3 * gl_PrimitiveID + 0],   //
                      indicesobj[0].iobj[3 * gl_PrimitiveID + 1],   //
                      indicesobj[0].iobj[3 * gl_PrimitiveID + 2]);  //
    Vertex3DObj v0 = verticesobj[0].vobj[ind.x];
    Vertex3DObj v1 = verticesobj[0].vobj[ind.y];
    Vertex3DObj v2 = verticesobj[0].vobj[ind.z];
    vec4 color4 = texture(texSampler[0], v0.texcoord * barycentricCoords.x + v1.texcoord * barycentricCoords.y + v2.texcoord * barycentricCoords.z);
    if(color4.w < Gm.gm.alphaCutoff){
      ignoreIntersectionEXT;
    }
  }
}