/* Copyright (c) 2019-2020, Sascha Willems
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 the "License";
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_GOOGLE_include_directive : enable
#include "07_raycommon.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;
layout(binding = 2, set = 0) uniform CameraProperties 
{
	mat4 viewInverse;
	mat4 projInverse;
	mat4 modelViewProj;
	mat4 normalMatrix;
} cam;


layout(location = 0) rayPayloadEXT vec4 prd;

void main() 
{
	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);			//gl_LaunchID : relative pixel position in window (0, 0) to (width, height)
	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);				//UV coordinates in window (0, 0) to (1, 1)
	vec2 d = inUV * 2.0 - 1.0;												//coordinates expansion {(0, 0) - (1, 1)} to {(-1, -1) - (1, 1)}, = screen space to clip space

	vec4 origin = cam.viewInverse * vec4(0,0,0,1);							//camera in world coordinates
	//vec3 origin = camProp.cameraPos;
	vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1) ;					//pixel position in view space
	vec4 direction = cam.viewInverse * vec4(normalize(target.xyz), 0) ;		//lookAtPoint to camera in world coordinates
	//direction = target - origin;	//lookAtPoint to camera in world coordinates
	//vec3 direction = normalize((cam.viewInverse * target).xyz);

/*
	vec3 origin = cam.cameraPos;
	vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1);
	target = cam.viewInverse * target;
	vec3 direction = normalize(target.xyz - origin);
*/
	float tmin = 0.001;
	float tmax = 1000.0;

	uint flags = gl_RayFlagsOpaqueEXT;
    prd = vec4(0.0);

    traceRayEXT(topLevelAS, flags, 0xff, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);		//stride = 32, sizeof(stride) * stride = 256

	imageStore(image, ivec2(gl_LaunchIDEXT.xy), prd);
}