#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_nonuniform_qualifier : enable
#include "07_raycommon.glsl"

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

layout(binding = 0, set = 0, scalar) buffer Verticesobj {vec3 vobj[];} verticesobj[];
layout(binding = 1, set = 0, scalar) buffer VerticesobjDst {Vertex3DObj vobjDst[];} verticesobjDst[];
layout(binding = 2, set = 0) buffer Morph {float mor[];} morph;
layout(binding = 3, set = 0) buffer Weight {float w[];} weight;
layout(binding = 4, set = 0) uniform AnimUniform {AnimationUniforms au;} animationUniforms;
layout(binding = 5, set = 0, scalar) buffer Debug {uint d[];} debug[];
layout(binding = 6, set = 0, scalar) buffer DebugVertex {Vertex3DObj dv[];} debugV[];
layout(binding = 7, set = 0, scalar) buffer KeyFrames{float kf[];} keyFrames;

void main()
{
  //uint ii = gl_WorkGroupID.y * 1024 + gl_WorkGroupID.x;
  uint ii = gl_WorkGroupID.x * 1024 + gl_LocalInvocationIndex;
  if(ii < animationUniforms.au.vertexSize){
    vec3 v4 = vec3(0.0);
    vec3 v0 = verticesobj[0].vobj[ii];
    vec3 v3 = v0;
    float interval = keyFrames.kf[1] - keyFrames.kf[0];
    uint weightoffset = animationUniforms.au.animNum * animationUniforms.au.morphTargetSize;
    uint weightoffsetNext = ((animationUniforms.au.animNum + 1) % animationUniforms.au.animNum )* animationUniforms.au.morphTargetSize;
    interval = 1.0 / interval;
    interval = (animationUniforms.au.time - keyFrames.kf[animationUniforms.au.animNum]) * interval;
    for(uint j = 0; j < animationUniforms.au.morphTargetSize; j++){
      uint indexf = (animationUniforms.au.morphTargetPositionSize * j + ii) * 3;
      vec3 v1 = vec3(morph.mor[indexf], morph.mor[indexf + 1], morph.mor[indexf + 2]);
      float cw = weight.w[weightoffset + j];
      float nw = weight.w[weightoffsetNext + j];
      //v3 += (cw + (nw - cw) * interval) * v1;
      v3 += cw * v1;
    }
    //v3 += v1 + ((v2 - v1) * ((animationUniforms.au.time - keyFrames.kf[animationUniforms.au.animNum]) * interval));
    verticesobjDst[0].vobjDst[ii].pos = animationUniforms.au.scale * v3;
    debug[0].d[ii] = ii;
    //verticesobjDst[0].vobjDst[ii].pos = animationUniforms.au.scale * v4 * 0.3;
    //verticesobjDst[0].vobjDst[ii].pos = animationUniforms.au.scale * v4;
    //verticesobjDst.vobjDst[0].pos = vec3(-1000.0);
  }
}